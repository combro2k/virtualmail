use strict;

$daemon_user  = 'amavis';
$daemon_group = 'amavis';

$MYHOME   = '/var/lib/amavis'; # a convenient default for other settings
$TEMPBASE = "$MYHOME/tmp";     # working directory, needs to be created manually
$ENV{TMPDIR} = $TEMPBASE;      # environment variable TMPDIR
$db_home   = "$MYHOME/db";

$pid_file  = "/var/run/amavis/amavisd.pid";
$lock_file = "/var/run/amavis/amavisd.lock";

$ENV{PATH} = $path = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';
$file   = 'file';
$gzip   = 'gzip';
$bzip2  = 'bzip2';
$lzop   = 'lzop';
$rpm2cpio   = ['rpm2cpio.pl','rpm2cpio'];
$cabextract = 'cabextract';
$uncompress = ['uncompress', 'gzip -d', 'zcat'];
$unfreeze = undef; 
$arc        = ['nomarch', 'arc'];
$unarj      = ['arj', 'unarj'];
$unrar      = ['unrar-free']; 
$zoo    = 'zoo';
$lha    = 'lha';
$lha	= undef;
$pax    = 'pax';
$cpio   = 'cpio';
$ar     = 'ar';
$ripole = 'ripole';
$dspam  = 'dspam';

# disable received header as we will be using a milter
$allowed_added_header_fields{lc('Received')} = 0;
#$insert_received_line = 0;

chomp($mydomain = `head -n 1 /etc/mailname`);

@local_domains_acl = ( ".$mydomain" );

chomp($myhostname = `hostname --fqdn`);

@av_scanners = (
 ['ClamAV-clamd',
   \&ask_daemon, ["CONTSCAN {}\n", "/var/run/clamav/clamd.ctl"],
   qr/\bOK$/m, qr/\bFOUND$/m,
   qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],

  ### http://www.bitdefender.com/
  ['BitDefender', 'bdscan',  # new version
	'--action=ignore --no-list {}', qr/^Infected files\s*:\s*0+(?!\d)/m,
	qr/^(?:Infected files|Identified viruses|Suspect files)\s*:\s*0*[1-9]/m,
	qr/(?:suspected|infected)\s*:\s*(.*)(?:\033|$)/m ],
);

@av_scanners_backup = (

  ### http://www.clamav.net/   - backs up clamd or Mail::ClamAV
  ['ClamAV-clamscan', 'clamscan',
    "--stdout --no-summary -r --tempdir=$TEMPBASE {}",
    [0], qr/:.*\sFOUND$/m, qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],
);

$QUARANTINEDIR = "$MYHOME/virusmails";
$quarantine_subdir_levels = 1; # enable quarantine dir hashing

$log_recip_templ = undef;    # disable by-recipient level-0 log entries
$DO_SYSLOG = 1;              # log via syslogd (preferred)
$syslog_ident = 'amavis';    # syslog ident tag, prepended to all messages
$syslog_facility = 'mail';
$syslog_priority = 'debug';  # switch to info to drop debug output, etc

$enable_db = 1;              # enable use of BerkeleyDB/libdb (SNMP and nanny)
$enable_global_cache = 1;    # enable use of libdb-based cache if $enable_db=1

$inet_socket_port = 10024;   # default listening socket

$sa_spam_subject_tag = '***SPAM*** ';
$sa_tag_level_deflt  = 2.0;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 6.31; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 6.31; # triggers spam evasive actions
$sa_dsn_cutoff_level = 10;   # spam level beyond which a DSN is not sent

$sa_mail_body_size_limit = 200*1024; # don't waste time on SA if mail is larger
$sa_local_tests_only = 0;    # only tests which do not require internet access?

$MAXLEVELS = 14;
$MAXFILES = 1500;
$MIN_EXPANSION_QUOTA =      100*1024;  # bytes
$MAX_EXPANSION_QUOTA = 300*1024*1024;  # bytes

$final_virus_destiny      = D_DISCARD;  # (data not lost, see virus quarantine)
$final_banned_destiny     = D_BOUNCE;   # D_REJECT when front-end MTA
$final_spam_destiny       = D_BOUNCE;
$final_bad_header_destiny = D_PASS;     # False-positive prone (for spam)

$enable_dkim_verification = 0; #disabled to prevent warning

$virus_admin = "postmaster\@$mydomain"; # due to D_DISCARD default

$X_HEADER_LINE = "Debian $myproduct_name at $mydomain";

@viruses_that_fake_sender_maps = (new_RE(
  [qr'\bEICAR\b'i => 0],            # av test pattern name
  [qr/.*/ => 1],  # true for everything else
));

@keep_decoded_original_maps = (new_RE(
  qr'^MAIL-UNDECIPHERABLE$', # recheck full mail if it contains undecipherables
  qr'^(ASCII(?! cpio)|text|uuencoded|xxencoded|binhex)'i,
));

$banned_filename_re = new_RE(

  # block certain double extensions anywhere in the base name
  qr'\.[^./]*\.(exe|vbs|pif|scr|bat|cmd|com|cpl|dll)\.?$'i,

  qr'\{[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}\}?$'i, # Windows Class ID CLSID, strict

  qr'^application/x-msdownload$'i,                  # block these MIME types
  qr'^application/x-msdos-program$'i,
  qr'^application/hta$'i,

  qr'.\.(exe|vbs|pif|scr|bat|cmd|com|cpl)$'i, # banned extension - basic

  qr'^\.(exe-ms)$',                       # banned file(1) types
);

@score_sender_maps = ({ # a by-recipient hash lookup table,
                        # results from all matching recipient tables are summed

  ## site-wide opinions about senders (the '.' matches any recipient)
  '.' => [  # the _first_ matching sender determines the score boost

   new_RE(  # regexp-type lookup table, just happens to be all soft-blacklist
    [qr'^(bulkmail|offers|cheapbenefits|earnmoney|foryou)@'i         => 5.0],
    [qr'^(greatcasino|investments|lose_weight_today|market\.alert)@'i=> 5.0],
    [qr'^(money2you|MyGreenCard|new\.tld\.registry|opt-out|opt-in)@'i=> 5.0],
    [qr'^(optin|saveonlsmoking2002k|specialoffer|specialoffers)@'i   => 5.0],
    [qr'^(stockalert|stopsnoring|wantsome|workathome|yesitsfree)@'i  => 5.0],
    [qr'^(your_friend|greatoffers)@'i                                => 5.0],
    [qr'^(inkjetplanet|marketopt|MakeMoney)\d*@'i                    => 5.0],
   ),

   { # a hash-type lookup table (associative array)
     #'nobody@cert.org'                        => -3.0,
   },
  ],  # end of site-wide tables
});

$enable_dkim_verification = 1;
@whitelist_sender_acl = qw( .$mydomain );
$final_virus_destiny      = D_DISCARD; # (defaults to D_BOUNCE)
$final_banned_destiny     = D_DISCARD;  # (defaults to D_BOUNCE)
$final_spam_destiny       = D_DISCARD;  # (defaults to D_REJECT)
$final_bad_header_destiny = D_PASS;  # (defaults to D_PASS), D_BOUNCE suggested

$virus_admin = undef;
$spam_admin = undef;

$unix_socketname = "/var/lib/amavis/amavisd.sock";

$interface_policy{'SOCK'} = 'AM.PDP-SOCK';
$policy_bank{'AM.PDP-SOCK'} = {
  protocol => 'AM.PDP',
  auth_required_release => 0, # don't require secret-id for release
};

read_l10n_templates('en_US', '/etc/amavis');

@author_to_policy_bank_maps = ( {
    '.ebay.com'               => 'WHITELIST',
    '.ebay.co.uk'             => 'WHITELIST',
    'ebay.at'                 => 'WHITELIST',
    'ebay.ca'                 => 'WHITELIST',
    'ebay.de'                 => 'WHITELIST',
    'ebay.fr'                 => 'WHITELIST',
    '.paypal.co.uk'           => 'WHITELIST',
    '.paypal.com'             => 'WHITELIST',  # author signatures
    './@paypal.com'           => 'WHITELIST',  # 3rd-party sign. by paypal.com
    'alert.bankofamerica.com' => 'WHITELIST',
    'amazon.com'              => 'WHITELIST',
    'cisco.com'               => 'WHITELIST',
    '.cnn.com'                => 'WHITELIST',
    'skype.net'               => 'WHITELIST',
    'welcome.skype.com'       => 'WHITELIST',
    'cc.yahoo-inc.com'        => 'WHITELIST',
    'cc.yahoo-inc.com/@yahoo-inc.com' => 'WHITELIST',
  } );

@bypass_virus_checks_maps = (
   \%bypass_virus_checks, \@bypass_virus_checks_acl, \$bypass_virus_checks_re);
@bypass_spam_checks_maps = (
   \%bypass_spam_checks, \@bypass_spam_checks_acl, \$bypass_spam_checks_re);

$final_spam_destiny  = D_DISCARD;
$sa_tag_level_deflt  = -9999;
$sa_tag2_level_deflt = 6.0;
$sa_kill_level_deflt = 21.0;
$sa_dsn_cutoff_level = 4;

$enable_dkim_verification = 1;
 
@lookup_sql_dsn = (
    ['DBI:mysql:database=__REPLACE_DATABASE_NAME__;host=__REPLACE_DATABASE_HOST__;port=__REPLACE_DATABASE_PORT__',
    '__REPLACE_DATABASE_USER__','__REPLACE_DATABASE_PASSWORD__']);
$sql_select_policy = 'SELECT name from virtual_domains WHERE CONCAT("@",name) IN (%k)';

1;  # ensure a defined return
